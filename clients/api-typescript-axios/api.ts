/* tslint:disable */
/* eslint-disable */
/**
 * Fellowship API
 * This API definition describes everything relating to Fellowship API. 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: georgehbroadhurst@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DistinctiveFeatures
 */
export interface DistinctiveFeatures {
    /**
     * The unique identifier for a distinctive feature
     * @type {string}
     * @memberof DistinctiveFeatures
     */
    'id'?: string;
    /**
     * The name of the distinctive feature
     * @type {string}
     * @memberof DistinctiveFeatures
     */
    'name'?: string;
    /**
     * A description of the distinctive feature
     * @type {string}
     * @memberof DistinctiveFeatures
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface HeroicCulture
 */
export interface HeroicCulture {
    /**
     * The unique identifier for a culture
     * @type {string}
     * @memberof HeroicCulture
     */
    'id'?: string;
    /**
     * The name of the culture
     * @type {string}
     * @memberof HeroicCulture
     */
    'name'?: string;
    /**
     * A description of the culture
     * @type {string}
     * @memberof HeroicCulture
     */
    'description'?: string;
    /**
     * 
     * @type {HeroicCultureBlessing}
     * @memberof HeroicCulture
     */
    'blessing'?: HeroicCultureBlessing;
    /**
     * A list of attribute sets associated with the culture
     * @type {Array<HeroicCultureAttributeSetsInner>}
     * @memberof HeroicCulture
     */
    'attributeSets'?: Array<HeroicCultureAttributeSetsInner>;
    /**
     * A list of derived stats associated with the culture
     * @type {Array<HeroicCultureDerivedStatsInner>}
     * @memberof HeroicCulture
     */
    'derivedStats'?: Array<HeroicCultureDerivedStatsInner>;
    /**
     * A list of skills associated with the culture
     * @type {Array<HeroicCultureStartingSkillsInner>}
     * @memberof HeroicCulture
     */
    'startingSkills'?: Array<HeroicCultureStartingSkillsInner>;
    /**
     * A list of combat proficiencies associated with the culture
     * @type {Array<HeroicCultureCombatProficienciesInner>}
     * @memberof HeroicCulture
     */
    'combatProficiencies'?: Array<HeroicCultureCombatProficienciesInner>;
    /**
     * A list of distinctive features associated with the culture
     * @type {Array<DistinctiveFeatures>}
     * @memberof HeroicCulture
     */
    'distinctiveFeatures'?: Array<DistinctiveFeatures>;
    /**
     * 
     * @type {StandardOfLiving}
     * @memberof HeroicCulture
     */
    'standardOfLiving'?: StandardOfLiving;
}
/**
 * 
 * @export
 * @interface HeroicCultureAttributeSetsInner
 */
export interface HeroicCultureAttributeSetsInner {
    /**
     * The base strength value of the culture
     * @type {number}
     * @memberof HeroicCultureAttributeSetsInner
     */
    'strength'?: number;
    /**
     * The base heart value of the culture
     * @type {number}
     * @memberof HeroicCultureAttributeSetsInner
     */
    'heart'?: number;
    /**
     * The base wits value of the culture
     * @type {number}
     * @memberof HeroicCultureAttributeSetsInner
     */
    'wits'?: number;
}
/**
 * The blessing associated with the culture
 * @export
 * @interface HeroicCultureBlessing
 */
export interface HeroicCultureBlessing {
    /**
     * The unique identifier for the blessing
     * @type {string}
     * @memberof HeroicCultureBlessing
     */
    'id'?: string;
    /**
     * The name of the blessing
     * @type {string}
     * @memberof HeroicCultureBlessing
     */
    'name'?: string;
    /**
     * A description of the blessing
     * @type {string}
     * @memberof HeroicCultureBlessing
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface HeroicCultureCombatProficienciesInner
 */
export interface HeroicCultureCombatProficienciesInner {
    /**
     * 
     * @type {WeaponGroups}
     * @memberof HeroicCultureCombatProficienciesInner
     */
    'weaponGroup'?: WeaponGroups;
    /**
     * The starting value of the proficiency
     * @type {number}
     * @memberof HeroicCultureCombatProficienciesInner
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface HeroicCultureDerivedStatsInner
 */
export interface HeroicCultureDerivedStatsInner {
    /**
     * The base endurance value of the culture
     * @type {number}
     * @memberof HeroicCultureDerivedStatsInner
     */
    'endurance'?: number;
    /**
     * The base hope value of the culture
     * @type {number}
     * @memberof HeroicCultureDerivedStatsInner
     */
    'hope'?: number;
    /**
     * The base parry value of the culture
     * @type {number}
     * @memberof HeroicCultureDerivedStatsInner
     */
    'parry'?: number;
}
/**
 * 
 * @export
 * @interface HeroicCultureStartingSkillsInner
 */
export interface HeroicCultureStartingSkillsInner {
    /**
     * 
     * @type {Skill}
     * @memberof HeroicCultureStartingSkillsInner
     */
    'skill'?: Skill;
    /**
     * The starting value of the skill
     * @type {number}
     * @memberof HeroicCultureStartingSkillsInner
     */
    'value'?: number;
    /**
     * Indicates if the skill is favoured
     * @type {boolean}
     * @memberof HeroicCultureStartingSkillsInner
     */
    'favor'?: boolean;
}
/**
 * 
 * @export
 * @interface Skill
 */
export interface Skill {
    /**
     * The unique identifier for a skill
     * @type {string}
     * @memberof Skill
     */
    'id'?: string;
    /**
     * The name of the skill
     * @type {string}
     * @memberof Skill
     */
    'name'?: string;
    /**
     * A description of the skill
     * @type {string}
     * @memberof Skill
     */
    'description'?: string;
    /**
     * The group to which the skill belongs
     * @type {string}
     * @memberof Skill
     */
    'group'?: SkillGroupEnum;
}

export const SkillGroupEnum = {
    Strength: 'Strength',
    Heart: 'Heart',
    Wits: 'Wits'
} as const;

export type SkillGroupEnum = typeof SkillGroupEnum[keyof typeof SkillGroupEnum];

/**
 * 
 * @export
 * @interface StandardOfLiving
 */
export interface StandardOfLiving {
    /**
     * The unique identifier for a standard of living
     * @type {string}
     * @memberof StandardOfLiving
     */
    'id'?: string;
    /**
     * The name of the standard of living
     * @type {string}
     * @memberof StandardOfLiving
     */
    'name'?: string;
    /**
     * A description of the standard of living
     * @type {string}
     * @memberof StandardOfLiving
     */
    'description'?: string;
    /**
     * The starting numerical treasure value of the standard of living
     * @type {number}
     * @memberof StandardOfLiving
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface WeaponGroups
 */
export interface WeaponGroups {
    /**
     * The unique identifier for a weapon group
     * @type {string}
     * @memberof WeaponGroups
     */
    'id'?: string;
    /**
     * The name of the weapon group
     * @type {string}
     * @memberof WeaponGroups
     */
    'name'?: string;
    /**
     * A description of the weapon group
     * @type {string}
     * @memberof WeaponGroups
     */
    'description'?: string;
}

/**
 * HeroicCultureApi - axios parameter creator
 * @export
 */
export const HeroicCultureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a specific heroic culture by ID
         * @param {string} heroicCultureId ID of the heroic culture to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroicCulture: async (heroicCultureId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'heroicCultureId' is not null or undefined
            assertParamExists('getHeroicCulture', 'heroicCultureId', heroicCultureId)
            const localVarPath = `/heroic-cultures/{heroicCultureId}`
                .replace(`{${"heroicCultureId"}}`, encodeURIComponent(String(heroicCultureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all heroic cultures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHeroicCultures: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/heroic-cultures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HeroicCultureApi - functional programming interface
 * @export
 */
export const HeroicCultureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HeroicCultureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a specific heroic culture by ID
         * @param {string} heroicCultureId ID of the heroic culture to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroicCulture(heroicCultureId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeroicCulture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroicCulture(heroicCultureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroicCultureApi.getHeroicCulture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all heroic cultures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHeroicCultures(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HeroicCulture>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHeroicCultures(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HeroicCultureApi.listHeroicCultures']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HeroicCultureApi - factory interface
 * @export
 */
export const HeroicCultureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HeroicCultureApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a specific heroic culture by ID
         * @param {string} heroicCultureId ID of the heroic culture to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroicCulture(heroicCultureId: string, options?: RawAxiosRequestConfig): AxiosPromise<HeroicCulture> {
            return localVarFp.getHeroicCulture(heroicCultureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all heroic cultures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHeroicCultures(options?: RawAxiosRequestConfig): AxiosPromise<Array<HeroicCulture>> {
            return localVarFp.listHeroicCultures(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HeroicCultureApi - object-oriented interface
 * @export
 * @class HeroicCultureApi
 * @extends {BaseAPI}
 */
export class HeroicCultureApi extends BaseAPI {
    /**
     * 
     * @summary Get a specific heroic culture by ID
     * @param {string} heroicCultureId ID of the heroic culture to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroicCultureApi
     */
    public getHeroicCulture(heroicCultureId: string, options?: RawAxiosRequestConfig) {
        return HeroicCultureApiFp(this.configuration).getHeroicCulture(heroicCultureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all heroic cultures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroicCultureApi
     */
    public listHeroicCultures(options?: RawAxiosRequestConfig) {
        return HeroicCultureApiFp(this.configuration).listHeroicCultures(options).then((request) => request(this.axios, this.basePath));
    }
}



